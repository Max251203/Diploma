from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QPushButton, QListWidget,
    QHBoxLayout, QListWidgetItem, QMessageBox, QInputDialog
)
from PySide6.QtCore import QTimer
from core.adapters.api_adapter import APIAdapter
import requests


class PairingPanel(QWidget):
    def __init__(self, adapter: APIAdapter, parent=None):
        super().__init__(parent)
        self.adapter = adapter

        self.layout = QVBoxLayout(self)

        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: ‚Äî")
        self.found_list = QListWidget()

        self.btn_start = QPushButton("üîì –ù–∞—á–∞—Ç—å —Å–æ–ø—Ä—è–∂–µ–Ω–∏–µ")
        self.btn_stop = QPushButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.btn_add = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")

        self.layout.addWidget(self.status_label)
        self.layout.addWidget(QLabel("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"))
        self.layout.addWidget(self.found_list)

        row = QHBoxLayout()
        row.addWidget(self.btn_start)
        row.addWidget(self.btn_stop)
        row.addWidget(self.btn_add)
        self.layout.addLayout(row)

        self.btn_start.clicked.connect(self._start)
        self.btn_stop.clicked.connect(self._stop)
        self.btn_add.clicked.connect(self._add_device)

        self.timer = QTimer()
        self.timer.timeout.connect(self._update_status)
        self.timer.start(2000)

    def _update_status(self):
        try:
            res = requests.get(f"{self.adapter.url}/api/pairing/status",
                               headers={"x-api-key": self.adapter.api_key})
            if res.ok:
                data = res.json()
                if data["active"]:
                    time_left = int(data["time_left"])
                    msg = f"üîÑ –ê–∫—Ç–∏–≤–Ω–æ ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {time_left} —Å–µ–∫."
                else:
                    msg = "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
                    self.timer.stop()

                self.status_label.setText("–°—Ç–∞—Ç—É—Å: " + msg)

                self.found_list.clear()
                for dev in data.get("discovered_devices", []):
                    ieee = dev.get("id", "???")
                    name = dev["info"].get("friendly_name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π")
                    item = QListWidgetItem(f"{name} ({ieee})")
                    item.setData(1000, ieee)
                    self.found_list.addItem(item)
            else:
                self.status_label.setText(f"–û—à–∏–±–∫–∞: {res.status_code}")
        except Exception as e:
            self.status_label.setText("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + str(e))

    def _start(self):
        time_value, ok = QInputDialog.getInt(
            self, "–°–æ–ø—Ä—è–∂–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫):", value=60, minValue=10, maxValue=300
        )
        if not ok:
            return

        try:
            res = requests.post(
                f"{self.adapter.url}/api/pairing/start",
                headers={"x-api-key": self.adapter.api_key},
                json={"duration": time_value}
            )
            if res.ok:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–°–æ–ø—Ä—è–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                self.timer.start(2000)
                self._update_status()
            else:
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {res.status_code}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def _stop(self):
        try:
            res = requests.post(
                f"{self.adapter.url}/api/pairing/stop",
                headers={"x-api-key": self.adapter.api_key}
            )
            if res.ok:
                QMessageBox.information(
                    self, "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "–°–æ–ø—Ä—è–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                self.timer.stop()
                self._update_status()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ö–æ–¥ {res.status_code}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def _add_device(self):
        selected = self.found_list.currentItem()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
            return

        ieee = selected.data(1000)

        try:
            res = requests.post(
                f"{self.adapter.url}/api/devices/add/{ieee}",
                headers={"x-api-key": self.adapter.api_key}
            )
            if res.ok:
                QMessageBox.information(
                    self, "–î–æ–±–∞–≤–ª–µ–Ω–æ", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
                self._update_status()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ö–æ–¥: {res.status_code}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))
