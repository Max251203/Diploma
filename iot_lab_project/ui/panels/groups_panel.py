from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QListWidget, QListWidgetItem,
    QPushButton, QMessageBox, QHBoxLayout, QInputDialog
)
from core.adapters.api_adapter import APIAdapter
import requests
import json


class GroupsPanel(QWidget):
    def __init__(self, adapter: APIAdapter, parent=None):
        super().__init__(parent)
        self.adapter = adapter
        self.groups_data = []

        self.list = QListWidget()
        self.title_label = QLabel("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")

        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_add = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.btn_edit = QPushButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
        self.btn_delete = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")

        layout = QVBoxLayout(self)
        layout.addWidget(self.title_label)
        layout.addWidget(self.list)

        btns_layout = QHBoxLayout()
        btns_layout.addWidget(self.btn_refresh)
        btns_layout.addWidget(self.btn_add)
        btns_layout.addWidget(self.btn_edit)
        btns_layout.addWidget(self.btn_delete)
        layout.addLayout(btns_layout)

        # –°–≤—è–∑–∏
        self.btn_refresh.clicked.connect(self._load_groups)
        self.btn_add.clicked.connect(self._create_group)
        self.btn_edit.clicked.connect(self._edit_group)
        self.btn_delete.clicked.connect(self._delete_group)

        self._load_groups()

    def _load_groups(self):
        self.list.clear()
        try:
            res = requests.get(
                f"{self.adapter.url}/api/groups",
                headers={"x-api-key": self.adapter.api_key}
            )
            if res.ok:
                self.groups_data = res.json()
                for group in self.groups_data:
                    name = group.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    desc = group.get("description", "")
                    devs = group.get("devices", [])
                    item = QListWidgetItem(
                        f"{name} ({len(devs)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤): {desc}")
                    item.setData(1000, group)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã
                    self.list.addItem(item)
            else:
                self.list.addItem(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {res.status_code}")
        except Exception as e:
            self.list.addItem(f"–û—à–∏–±–∫–∞: {e}")

    def _create_group(self):
        name, ok = QInputDialog.getText(
            self, "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        if not ok or not name.strip():
            return

        try:
            res = requests.post(
                f"{self.adapter.url}/api/groups",
                headers={"x-api-key": self.adapter.api_key},
                json={
                    "name": name.strip(),
                    "description": "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ GUI",
                    "devices": []
                }
            )
            if res.ok:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                self._load_groups()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ö–æ–¥: {res.status_code}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def _edit_group(self):
        selected = self.list.currentItem()
        if not selected:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        group: dict = selected.data(1000)
        current_name = group.get("name", "")
        current_desc = group.get("description", "")
        current_devs = group.get("devices", [])

        new_name, ok = QInputDialog.getText(
            self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É", "–ù–æ–≤–æ–µ –∏–º—è:", text=current_name)
        if not ok or not new_name.strip():
            return

        # –ü–æ–∫–∞ —Å–æ—Å—Ç–∞–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–º—è/–æ–ø–∏—Å–∞–Ω–∏–µ
        new_desc, ok = QInputDialog.getText(
            self, "–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", "–û–ø–∏—Å–∞–Ω–∏–µ:", text=current_desc)
        if not ok:
            return

        try:
            res = requests.put(
                f"{self.adapter.url}/api/groups/{group['id']}",
                headers={"x-api-key": self.adapter.api_key},
                json={
                    "name": new_name.strip(),
                    "description": new_desc.strip(),
                    "devices": current_devs
                }
            )
            if res.ok:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                self._load_groups()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ö–æ–¥: {res.status_code}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def _delete_group(self):
        selected = self.list.currentItem()
        if not selected:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        group = selected.data(1000)
        confirm = QMessageBox.question(
            self, "–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
            f"–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É: {group['name']}?",
            QMessageBox.Yes | QMessageBox.No
        )
        if confirm != QMessageBox.Yes:
            return

        try:
            res = requests.delete(
                f"{self.adapter.url}/api/groups/{group['id']}",
                headers={"x-api-key": self.adapter.api_key}
            )
            if res.ok:
                QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–æ", "–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞.")
                self._load_groups()
            else:
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", f"–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: –∫–æ–¥ {res.status_code}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))
