import os
from dotenv import load_dotenv
from core.ws_client import HomeAssistantWSClient
from core.device_manager import DeviceManager
from core.entity_manager import EntityManager

def main():
    load_dotenv()

    ws_url = os.getenv("HA_WS_URL")
    token = os.getenv("HA_TOKEN")

    if not ws_url or not token:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è HA_WS_URL –∏ HA_TOKEN")
        return

    ws_client = HomeAssistantWSClient(ws_url, token)
    entity_manager = EntityManager(ws_client)
    device_manager = DeviceManager(ws_client, entity_manager)

    categorized = device_manager.get_categorized_devices()


    # # üëâ –£–∫–∞–∂–∏ entity_id —Ç–≤–æ–µ–π –ª–∞–º–ø—ã (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –≤—ã–≤–æ–¥–∞ DeviceManager)
    # lamp_entity_id = "light.midesklamp1s_963a"

    # # === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã ===
    # state = entity_manager.get_state(lamp_entity_id)
    # print(f"üí° –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã '{lamp_entity_id}': {state}")

    # # === –í–∫–ª—é—á–µ–Ω–∏–µ –ª–∞–º–ø—ã ===
    # print("\nüîõ –í–∫–ª—é—á–∞–µ–º –ª–∞–º–ø—É...")
    # if entity_manager.turn_on(lamp_entity_id):
    #     print("‚úÖ –õ–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞")
    # else:
    #     print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ª–∞–º–ø—É")

    # # === –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ª–∞–º–ø—ã ===
    # print("\nüîå –í—ã–∫–ª—é—á–∞–µ–º –ª–∞–º–ø—É...")
    # if entity_manager.turn_off(lamp_entity_id):
    #     print("‚úÖ –õ–∞–º–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
    # else:
    #     print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –ª–∞–º–ø—É")

    # # === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ (toggle) ===
    # print("\nüîÅ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º (toggle) –ª–∞–º–ø—É...")
    # if entity_manager.toggle(lamp_entity_id):
    #     print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ")
    # else:
    #     print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–º–ø—É")



    print("\nüì¶ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n")
    for category, devices in categorized.items():
        if not devices:
            continue
        print(f"üìÇ {category} ({len(devices)})")
        for device in devices:
            print(f"  üß© {device['name']} | {device['manufacturer']} {device['model']}")
            # —Å–¥
        print("-" * 60)


if __name__ == "__main__":
    main()