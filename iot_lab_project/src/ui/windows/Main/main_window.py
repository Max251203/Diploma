from PySide6.QtWidgets import QMainWindow, QLabel, QMessageBox, QDialog
from PySide6.QtCore import QFile, QTextStream
from ui.windows.Main.main_ui import Ui_MainWindow 
from ui.windows.Connection.connection_dialog import ConnectionDialog
from ui.windows.Device.device_dialog import DeviceDialog
from ui.panels.devices_panel import DevicesPanel
from core.db.connection_db import HAConnectionDB
from core.workers.connection_worker import ConnectionWorker
from core.workers.device_loader import DeviceLoader
from utils.logger import Logger

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.setGeometry(100, 100, 900, 600)
        self.setWindowTitle("IoT –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self.logger = Logger(console_output=False)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.ws_client = None
        self.entity_manager = None
        self.device_manager = None
        self.selected_connection = None
        self.db = HAConnectionDB()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.load_connections()
        self.update_connection_status(disconnected=True)

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.ui.btnConnectSettings.clicked.connect(self.open_connection_settings)
        self.ui.btnConnect.clicked.connect(self.connect_to_selected)
        self.ui.btnGetDevices.clicked.connect(self.load_devices)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.setup_devices_panel()

    def setup_devices_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        layout = self.ui.layoutDeviceList
        layout.setContentsMargins(0, 0, 0, 0)

        while layout.count():
            child = layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        self.devices_panel = DevicesPanel()
        self.devices_panel.device_selected.connect(self.open_device_details)
        layout.addWidget(self.devices_panel)

    def load_connections(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–º–±–æ–±–æ–∫—Å"""
        current_id = self.selected_connection["id"] if self.selected_connection else None
        connections = self.db.get_all_connections()

        self.ui.comboConnections.clear()
        selected_index = 0

        for index, conn in enumerate(connections):
            self.ui.comboConnections.addItem(conn["name"], conn)
            if conn["id"] == current_id:
                selected_index = index

        self.ui.comboConnections.setCurrentIndex(selected_index)

    def open_connection_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        dialog = ConnectionDialog(self)
        if dialog.exec() == QDialog.Accepted:
            self.load_connections()

    def connect_to_selected(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É Home Assistant"""
        index = self.ui.comboConnections.currentIndex()
        if index == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        connection_data = self.ui.comboConnections.itemData(index)
        if not connection_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        self.selected_connection = connection_data
        self.ui.connectionStatus.setText("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

        self.logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Home Assistant...")
        self._update_logs()

        self.connection_worker = ConnectionWorker(
            self.selected_connection["url"], 
            self.selected_connection["token"]
        )
        self.connection_worker.connection_success.connect(self.on_connected)
        self.connection_worker.connection_failed.connect(self.on_connection_error)
        self.connection_worker.start()

    def on_connected(self, ws_client, rest_client, entity_manager, device_manager, ws_url):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.ws_client = ws_client
        self.rest_client = rest_client
        self.entity_manager = entity_manager
        self.device_manager = device_manager

        self.update_connection_status(success=True)
        self.logger.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {ws_url}")
        self._update_logs()

    def on_connection_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.update_connection_status(disconnected=True)
        self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_message}")
        self._update_logs()

    def update_connection_status(self, success=False, disconnected=False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ UI"""
        if disconnected:
            self.ui.connectionStatus.setText("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        elif success:
            self.ui.connectionStatus.setText("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")

    def load_devices(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if not self.device_manager:
            self.logger.error("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Äî –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self._update_logs()
            return

        self.logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        self._update_logs()

        self.devices_panel.clear_devices()
        self.devices_panel.show_loading_indicator("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

        self.device_loader = DeviceLoader(self.device_manager)
        self.device_loader.devices_loaded.connect(self.display_devices)
        self.device_loader.error.connect(self.on_device_load_error)
        self.device_loader.start()

    def display_devices(self, categorized):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        self.devices_panel.update_devices(categorized)

        total_devices = sum(len(devices) for devices in categorized.values())
        self.logger.success(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({total_devices} —à—Ç.)")
        self._update_logs()

    def on_device_load_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {error}")
        self._update_logs()

    def open_device_details(self, device):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        dialog = DeviceDialog(device, self.entity_manager, parent=self)
        dialog.exec()

    def _update_logs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ UI"""
        self.ui.textEditLogs.setPlainText(self.logger.get_text_log())
        self.ui.textEditLogs.verticalScrollBar().setValue(
            self.ui.textEditLogs.verticalScrollBar().maximum()
        )